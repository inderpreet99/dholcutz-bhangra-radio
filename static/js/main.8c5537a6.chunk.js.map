{"version":3,"sources":["components/Header.js","apiConfig.js","components/content/Player.js","components/content/NowPlaying.js","components/content/Search.js","components/content/Request.js","components/content/SongList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Navbar","bg","variant","Brand","href","Nav","Link","apiUrls","apiUrl","window","location","hostname","token","process","stationId","Player","props","dangerouslySetInnerHTML","__html","withRouter","useState","nowPlaying","setNowPlaying","useEffect","axios","url","apiConfig","method","then","res","data","console","log","catch","error","listeners","current","playing_next","song","text","SearchSong","Form","inline","FormControl","type","placeholder","value","searchTerm","onChange","handleChange","Request","Button","onClick","requestId","SongList","songList","setSongList","response","setSearchResults","React","setSearchTerm","searchResults","results","filter","title","toLowerCase","includes","artist","propertiesJsx","map","ListGroup","Item","key","id","length_text","request_id","Search","event","target","App","Container","Row","Col","Boolean","match","appJsx","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c5537a6.chunk.js","sourcesContent":["import React from 'react'\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\n\nfunction Header() {\n  return (\n    <header className=\"App-header\">\n\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">DholCutz Bhangra Radio</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#features\">Browse</Nav.Link>\n          <Nav.Link href=\"#pricing\">Chat Forume</Nav.Link>\n        </Nav>\n      </Navbar>\n\n    </header>\n  );\n}\n\nexport default Header;\n","let apiUrl\nconst apiUrls = {\n  production: 'https://beta.dholcutzradio.com/api',\n  development: 'https://beta.dholcutzradio.com/api'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default {\n  apiUrl,\n  token: process.env.REACT_APP_AZURACAST_TOKEN,\n  stationId: 1\n}","import React from 'react';\n\nconst Player = props => {\n  const iframeHtml = '<iframe src=\"https://beta.dholcutzradio.com/public/dholcutz_bhangra_radio/embed\" frameborder=\"0\" allowtransparency=\"true\" style=\"width: 100%; min-height: 150px; border: 0;\"></iframe>';\n  const iframe = () => {\n    return {\n      __html: iframeHtml\n    }\n  };\n\n\n  return (\n    <div className=\"player\" dangerouslySetInnerHTML={iframe()} />\n  );\n};\n\nexport default Player","import React, { useEffect, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport apiConfig from '../../apiConfig'\nimport Player from './Player.js'\nimport './NowPlaying.css'\n\nconst NowPlaying = props => {\n  const [nowPlaying, setNowPlaying] = useState(null)\n  \n\n  useEffect(() => {\n    axios({ url: `${apiConfig.apiUrl}/nowplaying/${apiConfig.stationId}`,\n      method: 'GET',\n    })\n      .then(res => {\n        setNowPlaying(res.data)\n        console.log(res.data)\n      })\n      .catch(console.error)\n  }, [])\n\n  if (!nowPlaying) {\n    return <p>Loading stuff...</p>\n  }\n\n  return (\n    <div className=\"jumbotron text-center\">\n      <Player />\n      <h6>Listeners: { nowPlaying.listeners.current }</h6>\n      <h6>Next Song: { nowPlaying.playing_next.song.text }</h6>\n      \n    </div>\n  )\n}\n\nexport default withRouter(NowPlaying);","\n\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport React from 'react'\n\nconst SearchSong = props => {\n\n  return (\n    <Form inline>\n      <FormControl\n        type=\"text\"\n        placeholder=\"Search\"\n        className=\"mr-sm-2\"\n        value={props.searchTerm}\n        onChange={props.handleChange} />\n    </Form>\n  )\n}\n\nexport default SearchSong","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport axios from 'axios'\nimport apiConfig from '../../apiConfig'\n\n\nconst Request = props => {\n  // const [requestId, setRequestId] = React.useState(\"\");\n\n  const requestSong = () => {\n    axios({ url: `${apiConfig.apiUrl}/station/${apiConfig.stationId}/request/${props.requestId}`,\n      method: 'POST',\n    })\n      .then(res => {\n        // setRequestId(res.data)\n        console.log(res.data)\n      })\n      .catch(console.error)\n  }\n\n  return (\n    <Button\n      className=\"request-button\"\n      variant=\"success\"\n      onClick={requestSong}\n    >request</Button>\n  )\n}\n\nexport default Request","import React, { useEffect, useState } from 'react'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport axios from 'axios'\nimport apiConfig from '../../apiConfig'\nimport { Link } from 'react-router-dom'\nimport Nav from 'react-bootstrap/Nav'\nimport Search from './Search'\nimport Request from './Request'\nimport './SongList.css';\n\nconst SongList = props => {\n  const [songList, setSongList] = useState([])\n\n  useEffect(() => {\n    axios({\n      url: `${apiConfig.apiUrl}/station/${apiConfig.stationId}/requests`,\n      method: 'GET'\n    })\n      .then(response => {\n        console.log(response.data)\n        setSongList(response.data)\n        setSearchResults(response.data)\n      })\n      .catch(console.error)\n  }, [])\n\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const handleChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  const [searchResults, setSearchResults] = React.useState([]);\n  React.useEffect(() => {\n    const results = songList.filter(song =>\n      song.song.title.toLowerCase().includes(searchTerm) || song.song.artist.toLowerCase().includes(searchTerm)\n    );\n    setSearchResults(results);\n  }, [searchTerm]);\n\n  const propertiesJsx = searchResults.map(song => (\n    <ListGroup.Item variant=\"dark\" key={song.song.id}>\n      <div className=\"song-item\">\n        <div className=\"song-info\">\n          <Nav.Link href={`#songList/${song.song.id}`}> {song.song.artist} - {song.song.title}</Nav.Link>\n          <span className=\"song-length\">{song.song.length_text}</span>\n        </div>\n        <Request \n          requestId={song.request_id} />\n        \n      </div>\n\n    </ListGroup.Item>\n  ))\n\n  return (\n    <div>\n      <h1>Song List</h1>\n      <Search\n        searchTerm={searchTerm}\n        handleChange={handleChange} />\n      <ListGroup>\n        {propertiesJsx}\n        \n      </ListGroup>\n    </div>\n  )\n}\n\nexport default SongList","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NowPlaying from './components/content/NowPlaying.js'\nimport SongList from './components/content/SongList.js'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n\n          <Col>\n            <Header />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <NowPlaying />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <SongList />\n          </Col>\n          \n        </Row>\n      </Container>\n        \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom'\n\nconst appJsx = (\n  <HashRouter>\n    <App />\n  </HashRouter>\n)\n\nReactDOM.render(appJsx, document.getElementById('root'))\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}