{"version":3,"sources":["components/Header.js","components/content/Player.js","components/content/NowPlaying.js","apiConfig.js","components/content/SongHistory.js","components/content/Station.js","components/content/Search.js","components/content/Request.js","paginate.js","components/content/SongList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Navbar","bg","variant","Brand","Player","props","dangerouslySetInnerHTML","__html","withRouter","station","listeners","current","playing_next","song","text","apiUrls","apiUrl","window","location","hostname","stationId","SongHistory","history","map","key","sh_id","Station","useState","setStation","trigger","setTrigger","useEffect","axios","url","apiConfig","method","then","res","data","setTimeout","now_playing","remaining","console","log","catch","error","song_history","SearchSong","Form","inline","FormControl","type","placeholder","value","searchTerm","onChange","handleChange","Request","React","requestMessage","setRequestMessage","Button","onClick","requestId","message","paginate","songs","activePage","songsPerPage","startFrom","slice","SongList","songList","setSongList","setActivePage","response","setSearchResults","setSearchTerm","searchResults","results","filter","title","toLowerCase","includes","artist","propertiesJsx","ListGroup","Item","id","album","request_id","Search","event","target","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","App","Container","Row","Col","Boolean","match","appJsx","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5bb453c.chunk.js","sourcesContent":["import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\n\n\nfunction Header() {\n  return (\n    <header className=\"App-header\">\n\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>DholCutz Bhangra Radio</Navbar.Brand>\n      </Navbar>\n\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Player = props => {\n  const iframeHtml = '<iframe src=\"https://beta.dholcutzradio.com/public/dholcutz_bhangra_radio/embed\" frameborder=\"0\" allowtransparency=\"true\" style=\"width: 100%; min-height: 150px; border: 0;\"></iframe>';\n  const iframe = () => {\n    return {\n      __html: iframeHtml\n    }\n  };\n\n\n  return (\n    <div className=\"player\" dangerouslySetInnerHTML={iframe()} />\n  );\n};\n\nexport default Player","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Player from './Player.js'\nimport './NowPlaying.css'\n\nconst NowPlaying = props => {\n  \n\n  if (!props.station) {\n    return <p>Loading stuff...</p>\n  }\n\n  return (\n    <div className=\"jumbotron text-center\">\n      <h4>Now Playing</h4>\n      <Player />\n      <h6>Listeners: { props.station.listeners.current }</h6>\n      <h6>Next Song: { props.station.playing_next.song.text }</h6>\n      \n    </div>\n  )\n}\n\nexport default withRouter(NowPlaying);","let apiUrl\nconst apiUrls = {\n  production: 'https://beta.dholcutzradio.com/api',\n  development: 'https://beta.dholcutzradio.com/api'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default {\n  apiUrl,\n  stationId: 1\n}","import React from 'react'\n\nconst SongHistory = props => {\n\n  if (!props.history) {\n    return <p>Loading stuff...</p>\n  }\n\n  return (\n    <ol>\n      <h4>Song History</h4>\n      {props.history.map(song => \n          <li key={song.sh_id}>{song.song.text}\n          </li>\n      )} \n    </ol>\n  )\n\n}\n\nexport default SongHistory","import React, { useEffect, useState } from 'react'\nimport NowPlaying from './NowPlaying.js'\nimport axios from 'axios'\nimport apiConfig from '../../apiConfig'\nimport SongHistory from './SongHistory'\n\nconst Station = props => {\n  const [station, setStation] = useState(null)\n\n  const [trigger, setTrigger] = useState(0)\n  \n\n  useEffect(() => {\n    axios({ url: `${apiConfig.apiUrl}/nowplaying/${apiConfig.stationId}`,\n      method: 'GET',\n    })\n      .then(res => {\n        setStation(res.data)\n\n        setTimeout( () => {\n          setTrigger(trigger+1)\n        }, res.data.now_playing.remaining*1000)\n        \n        console.log(res.data)\n      })\n      .catch(console.error)\n  }, [trigger])\n\n  if(!station) {\n    return <p>Loading station...</p>\n    \n  }\n  return (\n    <div>\n      <NowPlaying \n        station={station} />\n      <SongHistory \n        history={station.song_history} />\n    </div>\n  )}\n\nexport default Station","\n\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport React from 'react'\n\nconst SearchSong = props => {\n\n  return (\n    <Form inline>\n      <FormControl\n        type=\"text\"\n        placeholder=\"Search\"\n        className=\"mr-sm-2\"\n        value={props.searchTerm}\n        onChange={props.handleChange} />\n    </Form>\n  )\n}\n\nexport default SearchSong","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport axios from 'axios'\nimport apiConfig from '../../apiConfig'\n\n\nconst Request = props => {\n  const [requestMessage, setRequestMessage] = React.useState(\"\");\n\n  const requestSong = () => {\n    axios({ url: `${apiConfig.apiUrl}/station/${apiConfig.stationId}/request/${props.requestId}`,\n      method: 'POST',\n    })\n      .then(res => {\n        setRequestMessage(res.data.message)\n      }, res => {\n        setRequestMessage(\"Request failed!\")\n      })\n      .catch(console.error)\n  }\n\n\n\n  return (\n    requestMessage === \"\" ?\n      <Button\n        className=\"request-button\"\n        variant=\"success\"\n        onClick={requestSong}\n      >request</Button> :\n      <span>{ requestMessage }</span>\n\n  )\n}\n\nexport default Request","const paginate = (songs, activePage, songsPerPage) => {\n  const startFrom = (activePage - 1) * songsPerPage;\n\n  return songs.slice(startFrom, startFrom + songsPerPage)\n}\n\nexport default paginate","import React, { useEffect, useState } from 'react'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Pagination from \"react-js-pagination\";\nimport axios from 'axios'\nimport apiConfig from '../../apiConfig'\nimport Search from './Search'\nimport Request from './Request'\nimport './SongList.css';\nimport paginate from '../../paginate'\n\nconst SongList = props => {\n  const [songList, setSongList] = useState([])\n  const [activePage, setActivePage] = useState(1)\n\n  useEffect(() => {\n    axios({\n      url: `${apiConfig.apiUrl}/station/${apiConfig.stationId}/requests`,\n      method: 'GET'\n    })\n      .then(response => {\n        console.log(response.data)\n        setSongList(response.data)\n        setSearchResults(response.data)\n      })\n      .catch(console.error)\n  }, [])\n\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const handleChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  const [searchResults, setSearchResults] = React.useState([]);\n  React.useEffect(() => {\n    const results = songList.filter(song =>\n      song.song.title.toLowerCase().includes(searchTerm) || song.song.artist.toLowerCase().includes(searchTerm)\n    );\n    setSearchResults(results);\n  }, [searchTerm, songList]);\n\n  \n  const songsPerPage = 20;\n  const paginatedResults = paginate(searchResults, activePage, songsPerPage);\n  const propertiesJsx = paginatedResults.map(song => (\n    <ListGroup.Item variant=\"dark\" key={song.song.id}>\n      <div className=\"song-item\">\n        <div className=\"song-info\">\n          {song.song.text}<br />\n          <span className=\"song-album\">{song.song.album}</span>\n        </div>\n        <Request \n          requestId={song.request_id} />\n        \n      </div>\n\n    </ListGroup.Item>\n  ))\n\n  return (\n    <div>\n      <h1>Song List</h1>\n\n      <Search\n        searchTerm={searchTerm}\n        handleChange={handleChange} />\n\n      <ListGroup>\n        {propertiesJsx}\n      </ListGroup>\n\n      <Pagination\n          activePage={activePage}\n          itemsCountPerPage={10}\n          totalItemsCount={450}\n          pageRangeDisplayed={5}\n          onChange={setActivePage}\n          itemClass=\"page-item\"\n          linkClass=\"page-link\"\n        />\n\n    </div>\n  )\n\n  // handlePageChange(pageNumber) {\n  //   console.log(`active page is ${pageNumber}`);\n  //   this.setState({activePage: pageNumber});\n  // }\n}\n\nexport default SongList","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Station from './components/content/Station.js'\nimport SongList from './components/content/SongList.js'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n\n          <Col>\n            <Header />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Station />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <SongList />\n          </Col>\n          \n        </Row>\n      </Container>\n        \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom'\n\nconst appJsx = (\n  <HashRouter>\n    <App />\n  </HashRouter>\n)\n\nReactDOM.render(appJsx, document.getElementById('root'))\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}